---
openapi: 3.0.3
info:
  version: 0.1.1
  title: API управления страницами компаний
  description: REST API управления страницами компаний в формате OpenAPI v3
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  contact:
    name: Nazarov Andrey
servers:
  - url: http://localhost:8080
    description: Dev Server
tags:
  - name: Admin.AccountCompany
    description: Admin section. Companies' accounts
  - name: Account.CompanyPage
    description: Account section. Company page
  - name: Public
    description: Public section

paths:
  /v1/accounts/companies-pages:
    get:
      summary: Метод получения списка страниц компаний
      description: Метод предназначен для получения списка страниц компаний всех аккаунтов, сохраненных в БД
      operationId: getCompanyPages
      tags:
        - Admin.AccountCompany

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.acceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.correlationId"
        - $ref: "#/components/parameters/App.Request.Query.ItemStatuses"

      responses:
        "200":
          description: Получен списка страниц компаний всех аккаунтов
          content:
            application/json;charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/App.Model.Account.CompanyPage"
        "401":
          $ref: "#/components/responses/App.Response.Error401"
        "403":
          $ref: "#/components/responses/App.Response.Error403"
        "500":
          $ref: "#/components/responses/App.Response.Error5XX"

  /v1/account/company-page:
    get:
      summary: Метод получения страницы компании
      description: Метод предназначен для получения информации о странице компании текущего аккаунта из БД
      operationId: getAccountCompanyPage
      tags:
        - Account.CompanyPage

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.acceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.correlationId"

      responses:
        "200":
          description: Получена информация о странице компании текущего аккаунта
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/App.Model.Account.CompanyPage"
        "401":
          $ref: "#/components/responses/App.Response.Error401"
        "403":
          $ref: "#/components/responses/App.Response.Error403"
        "500":
          $ref: "#/components/responses/App.Response.Error5XX"

    put:
      summary: Метод сохранения страницы компании
      description: Метод предназначен для сохранения страницы компании текущего аккаунта в БД
      operationId: storeAccountCompanyPage
      tags:
        - Account.CompanyPage

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.acceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.correlationId"

      requestBody:
        required: true
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/App.Model.Account.CompanyPage"

      responses:
        "204":
          description: Информация о страницы компании текущего аккаунта успешно сохранена
        "400":
          # Заголовок записи не может быть пустым
          # Заголовок записи не может быть более 128 символов
          $ref: "#/components/responses/App.Response.Error400"
        "401":
          $ref: "#/components/responses/App.Response.Error401"
        "403":
          $ref: "#/components/responses/App.Response.Error403"
        "500":
          $ref: "#/components/responses/App.Response.Error5XX"

  /v1/account/company-page/status:
    put:
      summary: Метод изменения статуса страницы компании
      description: Метод предназначен для изменения статуса страницы компании текущего аккаунта в БД
      operationId: changeAccountCompanyPageStatus
      tags:
        - Account.CompanyPage

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.acceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.correlationId"

      requestBody:
        required: true
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/App.Request.Model.ChangeEntityStatus"

      responses:
        "204":
          description: Статус страницы компании текущего аккаунта успешно изменён
        "400":
          # Указанный статус содержит недопустимое значение
          # В данный статус переключение невозможно
          $ref: "#/components/responses/App.Response.Error400"
        "401":
          $ref: "#/components/responses/App.Response.Error401"
        "403":
          $ref: "#/components/responses/App.Response.Error403"
        "500":
          $ref: "#/components/responses/App.Response.Error5XX"

  /v1/account/company-page/logo:
    put:
      summary: Метод сохранения логотипа компании
      description: Метод предназначен для загрузки и сохранения нового логотипа компании на её страницу для текущего аккаунта в файловое хранилище
      operationId: uploadAccountCompanyPageLogo
      tags:
        - Account.CompanyPage

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.acceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.correlationId"

      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                companyLogo:
                  description: Бинарный файл с расширением JPEG, PNG
                  type: string
                  format: binary
                  maxLength: 262144 # 256Kb

      responses:
        "204":
          description: Логотип компании текущего аккаунта был сохранён
        "400":
          # Загруженный логотип некорректен (битый файл, расширение, ...)
          $ref: "#/components/responses/App.Response.Error400"
        "401":
          $ref: "#/components/responses/App.Response.Error401"
        "500":
          $ref: "#/components/responses/App.Response.Error5XX"

    delete:
      summary: Метод удаления логотипа компании
      description: Метод предназначен для удаления логотипа компании текущего аккаунта из БД
      operationId: removeAccountCompanyPageLogo
      tags:
        - Account.CompanyPage

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.acceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.correlationId"

      responses:
        "204":
          description: Логотип компании текущего пользователя успешно удалён
        "401":
          $ref: "#/components/responses/App.Response.Error401"
        "404":
          $ref: "#/components/responses/App.Response.Error404"
        "500":
          $ref: "#/components/responses/App.Response.Error5XX"

  /v1/company/{companyPageName}:
    get:
      summary: Метод получения страницы компании
      description: Метод предназначен для получения информации об указанной странице компании из БД
      operationId: getPublicAccountCompanyPage
      tags:
        - Public

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.acceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.correlationId"
        - $ref: "#/components/parameters/App.Public.Request.Path.companyPageName"

      responses:
        "200":
          description: Получена информация об указанной странице компании
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/App.Public.Response.Model.CompanyPage"
        "404":
          $ref: "#/components/responses/App.Response.Error403"
        "500":
          $ref: "#/components/responses/App.Response.Error5XX"

components:

  parameters:
    App.Request.Header.acceptLanguage:
      description: https://developer.mozilla.org/ru/docs/Web/HTTP/Headers/Accept-Language
      name: Accept-Language
      in: header
      schema:
        type: string
      example: "ru;q=0.9, fr-CH, fr;q=0.8, en;q=0.7, *;q=0.5"

    App.Request.Header.correlationId:
      name: CorrelationID
      in: header
      schema:
        type: string
        format: uuid
        minLength: 36
        maxLength: 36
      example: "f7479171-83d2-4f64-84ac-892f8c0aaf48"

    App.Request.Query.ItemStatuses:
      name: statuses
      in: query
      required: false
      description: Список статусов через ","
      schema:
        type: string
      example: "DRAFT,ENABLED"

    App.Public.Request.Path.imagePath:
      name: imagePath
      in: path
      required: true
      schema:
        type: string
        minLength: 5
        maxLength: 128
      example: "category/product.jpg"

    App.Public.Request.Path.companyPageName:
      name: companyPageName
      in: path
      required: true
      schema:
        type: string
        minLength: 5
        maxLength: 64
      example: "printrobot"

  schemas:
    App.Response.Model.Error: # RFC 7807 (Problem Details for HTTP APIs)
      type: object
      required:
        - title
        - detail
        - request
        - time
      properties:
        title:
          description: Краткое описание проблемы, понятное человеку
          type: string
          example: "Entity not found"
        detail:
          description: Описание конкретно возникшей ошибки, понятное человеку
          type: string
          example: "Entity [User] with id = [123456] not found. You MUST use PUT to add entity instead of GET"
        request:
          description: Метод и URL запроса
          type: string
          example: "PUT /users/123456"
        time:
          description: Время возникновения ошибки с точностью до миллисекунд
          type: string
          format: date-time
          example: "2023-01-01T12:00:00.000+02:00"
        errorTraceId:
          description: Идентификатор конкретного возникновения ошибки
          type: string
          example: "5add1be1-90ab5d42-02fa8b1f-672503f2"

    App.Response.Model.ErrorAttribute:
      type: object
      required:
        - id
        - value
      properties:
        id:
          description: Название атрибута, где произошла ошибка
          type: string
          example: "attributeName"
        value:
          description: Описание ошибки
          type: string
          example: "Атрибут не может быть пустым. Указано недопустимое значение атрибута"

    App.Response.Model.CreateEntity:
      type: object
      required:
        - id
      properties:
        id:
          description: Идентификатор созданного ресурса
          type: integer
          example: 1000
        message:
          type: string
          example: "Ресурс был успешно создан"

    App.Request.Model.ChangeEntityStatus:
      type: object
      properties:
        version:
          description: Текущая версия ресурса
          type: number
          example: 7
        status:
          description: Статус в который переключается ресурс
          type: string
          maxLength: 64
          example: "ENABLED"

    App.Model.Account.CompanyPage:
      type: object
      properties:
        accountId: # get
          type: integer
          example: 21
        version: # get, store, changeStatus, remove
          description: Текущая версия записи
          type: number
          example: 7
        updateAt: # get
          description: Дата и время обновления записи
          type: string
          format: date-time
          example: "2023-01-01T12:00:00.000+02:00"
        rewriteName: # get, store
          description: Уникальное название страницы
          type: string
          maxLength: 64
          example: "company-name"
        pageHead: # get, store
          description: Заголовок страницы компании
          type: string
          maxLength: 128
          example: "Компания 0001"
        logoPath: # get
          description: Относительный путь к логотипу компании
          type: string
          maxLength: 128
          example: ""
        siteUrl: # get, store
          description: URL страницы сайта компании
          type: string
          maxLength: 256
          example: "https://site.localhost/"
        status: # get, changeStatus
          description: |-
            Текущий статус страницы:
            - HIDDEN - скрыто;
            - PUBLISHED - опубликовано;
          type: string
          enum:
            - HIDDEN
            - PUBLISHED
          example: "PUBLISHED"

    App.Public.Response.Model.CompanyPage:
      type: object
      properties:
        pageHead: # get
          description: Заголовок страницы компании
          type: string
          example: "Компания 0001"
        logoUrl: # get
          description: URL логотипа компании
          type: string
          example: "https://localhost/company-logo.png"
        siteUrl: # get
          description: URL страницы сайта компании
          type: string
          example: "https://site.localhost/"

  responses:
    App.Response.Error400:
      description: Некорректные входные данные. Возвращается список атрибутов с ошибками
      content:
        application/json;charset=UTF-8:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/App.Response.Model.ErrorAttribute"

    App.Response.Error401:
      description: Пользователь не был аутентифицирован
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/App.Response.Model.Error"

    App.Response.Error403:
      description: Пользователю с текущими правами доступ отклонён
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/App.Response.Model.Error"

    App.Response.Error404:
      description: Запрашиваемый ресурс не был найден
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/App.Response.Model.Error"

    App.Response.Error5XX:
      description: Внутренняя ошибка сервера
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/App.Response.Model.Error"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT